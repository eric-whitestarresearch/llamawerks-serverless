#     Llamaflow - A self service portal with runbook automation
#     Copyright (C) 2024  Whitestar Research LLC
#
#     Licensed under the Apache License, Version 2.0 (the 'License');
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#      Unless required by applicable law or agreed to in writing, software
#      distributed under the License is distributed on an 'AS IS' BASIS,
#      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#      See the License for the specific language governing permissions and
#      limitations under the License.

#####################################################################
# This file is generated. Do NOT edit, changes will be overwritten  #
#####################################################################

openapi: 3.0.0
info:
  title: Llamawerks Service Engine API
  description: API for Llamawerks service engine
  version: 0.1.0
servers:
  - url: 'https://{apiid}.execute-api.{region}.amazonaws.com/{env}'
    variables:
      env:
        description: Environment dev
        default: dev
        enum:
          - dev
      region:
        description: The AWS region
        default: us-east-1
      apiid:
        description: The API gteway id
        default: abc123
  - url: 'https://api.{env}.llamawerks.net'
    variables:
      env:
        description: Environment dev
        default: dev
x-amazon-apigateway-request-validators:
  all:
    validateRequestParameters: true
    validateRequestBody: true
  params-only:
    validateRequestParameters: true
    validateRequestBody: false
components:
  schemas:
    serviceComponentDeleted:
      type: object
      properties:
        deleted:
          type: integer
          example: 1
    serviceComponentUpdated:
      type: object
      properties:
        updated:
          type: integer
          example: 1
    serviceComponentCreated:
      type: object
      properties:
        id:
          type: string
          example: 66ce0c6f2ee6c75d61eef299
    dataCollectionCreated:
      type: object
      properties:
        id:
          type: string
          example: 66ce0c6f2ee6c75d61eef299
        indexes:
          type: array
          example:
            - name_1
            - color_1
    dataCollection:
      type: object
      required:
        - name
        - pack
        - fields
      additionalProperties: false
      properties:
        name:
          type: string
          description: The name of this data collection
        pack:
          type: string
          description: The pack this collection belongs to
        fields:
          type: array
          items:
            type: object
            required:
              - name
              - type
              - required
              - index
              - unique
            properties:
              name:
                type: string
                description: The name of the field
              type:
                type: string
                enum:
                  - string
                  - integer
                  - float
                  - datetime
                  - boolean
                description: The type of data in the field
              required:
                type: boolean
                description: Is this a required or optional field
              index:
                type: boolean
                description: 'Is this field an index, must be of string type'
              unique:
                type: boolean
                description: 'If this is an index field, is it unique'
    dataCollectionFilter:
      type: object
      required:
        - name
        - pack
        - data_collection
        - filter
        - project
        - variables
      additionalProperties: false
      properties:
        name:
          type: string
          description: The name of this data collection filter
        pack:
          type: string
          description: The pack this data collection filter belongs to
        data_collection:
          type: string
          description: The data collection this filter should be used against
        filter:
          type: object
          items:
            type: object
        project:
          type: array
          items:
            type: string
        variables:
          type: array
          description: A list of variables used in the query
          items:
            type: object
            required:
              - name
              - type
            additionalProperties: false
            properties:
              name:
                type: string
                description: The name of the variable in the query
              type:
                type: string
                description: The type of the variable
                enum:
                  - string
                  - integer
                  - float
                  - datetime
                  - boolean
    service:
      type: object
      properties:
        name:
          type: string
          description: The name of the service
        pack:
          type: string
          description: THe pack this service belongs to
        fields:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: The name of this field
              display_name:
                type: string
                description: The name that should be presented to the user
              wait_to_render:
                type: boolean
                description: Should the values be included at the time of the serivce render
              filter:
                type: string
                description: The name of the data collection filter used to generate this choice
              data_collection:
                type: string
                description: The name of the data collection to execute the filter against
              display_type:
                type: string
                description: The type of element displayed to the use
                enum:
                  - drop_down
                  - text
                  - grid
                  - check_box
                  - radio_button
              selection_key:
                type: string
                description: The key in the returned data used for the user selection
            required:
              - name
              - display_name
              - wait_to_render
              - filter
              - data_collection
              - display_type
      required:
        - pack
        - name
        - fields
    serviceExecution:
      type: object
      properties:
        status:
          type: string
          description: The status of the execution
          enum:
            - submitted
            - complete
            - error
            - in progress
            - wait for approval
            - approved
            - declined
        result:
          type: object
          description: The result of an execution step
          properties:
            step:
              type: string
              description: The name of the step
            status:
              type: string
              description: The status of the step
              enum:
                - submitted
                - complete
                - error
                - in progress
                - wait for approval
                - approved
                - declined
            output:
              type: string
              description: The output of the step
            error:
              type: string
              description: The error output of the step if any
          required:
            - step
            - status
            - output
            - error
      required:
        - status
    serviceExecutionSearch:
      type: object
      description: The parameters for the search
      properties:
        status:
          type: array
          items:
            type: string
            description: Optional the status of the execution
            enum:
              - submitted
              - complete
              - error
              - in progress
              - wait for approval
              - approved
              - declined
        document_id:
          type: string
          description: Optional the id of the execution Should be a 24 charcter hex string
        pack:
          type: string
          description: The pack the service belongs to
        service_name:
          type: string
          description: The name of the service
        before:
          type: integer
          description: A UNIX timestamp of the executed before time
        after:
          type: integer
          description: A UNIX timestamp of the executed after time
        fields:
          type: array
          description: A list of fields to include in the output
          items:
            type: string
  parameters:
    pack_name:
      name: pack_name
      description: The name of the pack the component is in
      in: path
      required: true
      schema:
        type: string
    service_name:
      name: service_name
      description: The name of the service
      in: path
      required: true
      schema:
        type: string
    field_name:
      name: field_name
      description: The name of the field in the service to render
      in: path
      required: true
      schema:
        type: string
    data_collection_name:
      name: data_collection_name
      description: The name of the data collection to use
      in: path
      required: true
      schema:
        type: string
    document_id:
      name: document_id
      description: The id of the document
      in: path
      required: true
      schema:
        type: string
        pattern: '[0-9a-f]{24}'
    collection_name_in_query:
      name: data_collection_name
      description: The name of the data collection to use
      in: query
      required: false
      schema:
        type: string
    collection_name_in_query_req:
      name: data_collection_name
      description: The name of the data collection to use
      in: query
      required: true
      schema:
        type: string
    filter_name_in_query:
      name: filter_name
      description: The name of the data collection filter to use
      in: query
      required: false
      schema:
        type: string
    filter_name_in_query_req:
      name: filter_name
      description: The name of the data collection filter to use
      in: query
      required: true
      schema:
        type: string
    project_in_query_req:
      name: project
      description: Return all fields or just fields selected in the filter
      in: query
      required: true
      schema:
        type: boolean
    service_name_in_query:
      name: service_name
      description: The name of the service
      in: query
      required: false
      schema:
        type: string
    service_name_in_query_req:
      name: service_name
      description: The name of the service
      in: query
      required: true
      schema:
        type: string
paths:
  '/service_engine/{pack_name}/data_collection':
    get:
      operationId: data_collection.get_data_collections
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/collection_name_in_query'
      responses:
        '200':
          description: Get all of the data collections
        '204':
          description: There are no data collections in the pack
        '404':
          description: Could not find the data collection in the pack
      tags:
        - Data Collection
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_data_collection/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_data_collection_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: params-only
    put:
      operationId: data_collection.create_data_collection
      parameters:
        - $ref: '#/components/parameters/pack_name'
      requestBody:
        x-body-name: data_collection_definition
        description: The definition of the data collection
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataCollection'
      responses:
        '200':
          description: 'The data collection already exists, no action taken'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataCollectionCreated'
        '201':
          description: Successfully created the data collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataCollectionCreated'
        '400':
          description: The body does not meet the schema requirements
        '422':
          description: The pack name specified in the URI and the data collection definition do not match
      tags:
        - Data Collection
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_data_collection/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_data_collection_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    patch:
      operationId: data_collection.update_data_collection
      parameters:
        - $ref: '#/components/parameters/pack_name'
      requestBody:
        x-body-name: data_collection_definition
        description: The definition of the data collection
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataCollection'
      responses:
        '202':
          description: Data collection definition updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentUpdated'
        '208':
          description: 'Data collection definition matched existing definition, no change occured'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentUpdated'
        '400':
          description: The body does not meet the schema requirements
        '404':
          description: The data collection does not exist in the pack. Create it using the put method
        '422':
          description: The pack name specified in the URI and the data collection definition do not match
      tags:
        - Data Collection
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_data_collection/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_data_collection_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    delete:
      operationId: data_collection.delete_data_collection
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/collection_name_in_query_req'
      responses:
        '200':
          description: Data collection deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentDeleted'
      tags:
        - Data Collection
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_data_collection/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_data_collection_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: params-only
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Data Collection
      responses:
        '200':
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: never
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
  '/service_engine/{pack_name}/data_collection/{data_collection_name}/document':
    get:
      operationId: document.get_documents
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/data_collection_name'
      responses:
        '200':
          description: Returned all of the data collection documents
        '204':
          description: There are no documents in the data collection
        '404':
          description: The specified data collection does not exist in the pack
      tags:
        - Documents
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_document/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_document_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: params-only
    post:
      operationId: document.get_document_with_filter
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/data_collection_name'
        - $ref: '#/components/parameters/filter_name_in_query_req'
        - $ref: '#/components/parameters/project_in_query_req'
      requestBody:
        x-body-name: filter_variables
        description: Variables for the filter
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Get all of the data collections
        '204':
          description: There are no documents in the data collection that match the filter
        '404':
          description: The specified data collection or filter does not exist in the pack
      tags:
        - Documents
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_document/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_document_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    put:
      operationId: document.create_document
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/data_collection_name'
      requestBody:
        x-body-name: document
        description: The document to add
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Created the document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentCreated'
        '404':
          description: The specified data collection does not exist in the pack
      tags:
        - Documents
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_document/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_document_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: params-only
    patch:
      operationId: document.update_document_by_filter
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/data_collection_name'
        - $ref: '#/components/parameters/filter_name_in_query_req'
      requestBody:
        x-body-name: document_and_vars
        description: The updates to the document and the variables
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variables:
                  type: object
                document:
                  type: object
              required:
                - variables
                - document
      responses:
        '200':
          description: Updated the document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentUpdated'
        '404':
          description: The specified data collection or filter does not exist in the pack
      tags:
        - Documents
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_document/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_document_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Documents
      responses:
        '200':
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: never
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
  '/service_engine/{pack_name}/data_collection/{data_collection_name}/document/id/{document_id}':
    get:
      operationId: document.get_document_by_id
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/data_collection_name'
        - $ref: '#/components/parameters/document_id'
      responses:
        '200':
          description: Return the data collection document matching the ID.
        '404':
          description: The specified data collection does not exist in the pack or a document with the ID does not exist
      tags:
        - Documents
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_document_id/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_document_id_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: params-only
    patch:
      operationId: document.update_document_by_id
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/data_collection_name'
        - $ref: '#/components/parameters/document_id'
      requestBody:
        x-body-name: document
        description: The updates to the document and the variables
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                document:
                  type: object
              required:
                - document
      responses:
        '200':
          description: Updated the document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentUpdated'
        '404':
          description: The specified data collection does not exist in the pack
      tags:
        - Documents
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_document_id/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_document_id_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    delete:
      operationId: document.delete_document_by_id
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/data_collection_name'
        - $ref: '#/components/parameters/document_id'
      responses:
        '200':
          description: Deleted the document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentDeleted'
        '404':
          description: The specified data collectin does not exist in the pack
      tags:
        - Documents
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_document_id/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_document_id_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: params-only
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Documents
      responses:
        '200':
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: never
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
  '/service_engine/{pack_name}/filter':
    get:
      operationId: data_collection_filter.get_data_collection_filter
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/filter_name_in_query'
      responses:
        '200':
          description: Retreived the filter definition(s)
        '204':
          description: There are no filters in the pack
        '404':
          description: Could not find the filterin the pack
      tags:
        - Data Collection Filter
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_filter/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_filter_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: params-only
    put:
      operationId: data_collection_filter.create_data_collection_filter
      parameters:
        - $ref: '#/components/parameters/pack_name'
      requestBody:
        x-body-name: dataCollectionFilter_definition
        description: The definition of the data collection filter
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataCollectionFilter'
      responses:
        '200':
          description: 'The data collection filter already exists, no action taken'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentCreated'
        '201':
          description: Successfully created the data collection filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentCreated'
        '400':
          description: The body does not meet the schema requirements
        '422':
          description: The pack name specified in the URI and the data collection filter definition do not match
      tags:
        - Data Collection Filter
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_filter/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_filter_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    patch:
      operationId: data_collection_filter.update_data_collection_filter
      parameters:
        - $ref: '#/components/parameters/pack_name'
      requestBody:
        x-body-name: dataCollectionFilter_definition
        description: The definition of the data collection
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataCollectionFilter'
      responses:
        '202':
          description: Data collection filter definition updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentUpdated'
        '208':
          description: 'Data collection definition filter matched existing definition, no change occured'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentUpdated'
        '400':
          description: The body does not meet the schema requirements
        '404':
          description: The data collection filter does not exist in the pack. Create it using the put method
        '422':
          description: The pack name specified in the URI and the data collection filter definition do not match
      tags:
        - Data Collection Filter
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_filter/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_filter_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    delete:
      operationId: data_collection_filter.delete_data_collection_filter
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/filter_name_in_query_req'
      responses:
        '200':
          description: Data collection deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentDeleted'
      tags:
        - Data Collection Filter
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_filter/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_filter_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: params-only
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Data Collection Filter
      responses:
        '200':
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: never
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
  '/service_engine/{pack_name}/service/':
    get:
      operationId: service.get_services
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/service_name_in_query'
      responses:
        '200':
          description: Retreived the service definition(s)
        '204':
          description: There are no services in the pack
        '404':
          description: Could not find the service in the pack
      tags:
        - Service
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_service/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_service_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: params-only
    put:
      operationId: service.create_service
      parameters:
        - $ref: '#/components/parameters/pack_name'
      requestBody:
        x-body-name: service_definition
        description: The service definition
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service'
      responses:
        '200':
          description: 'The service already exists, no action taken'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentCreated'
        '201':
          description: Successfully created the service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentCreated'
        '400':
          description: The body does not meet the schema requirements
        '422':
          description: The pack name specified in the URI and the service definition do not match
      tags:
        - Service
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_service/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_service_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    patch:
      operationId: service.update_service
      parameters:
        - $ref: '#/components/parameters/pack_name'
      requestBody:
        x-body-name: service_definition
        description: The definition of the serice
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service'
      responses:
        '202':
          description: Service definition updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentUpdated'
        '208':
          description: 'Service definition filter matched existing definition, no change occured'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentUpdated'
        '400':
          description: The body does not meet the schema requirements
        '404':
          description: The service does not exist in the pack. Create it using the put method
        '422':
          description: The pack name specified in the URI and the service definition do not match
      tags:
        - Service
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_service/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_service_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    delete:
      operationId: service.delete_service
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/service_name_in_query_req'
      responses:
        '200':
          description: Service deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceComponentDeleted'
      tags:
        - Service
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_service/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_service_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: params-only
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Service
      responses:
        '200':
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: never
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
  '/service_engine/{pack_name}/service/{service_name}':
    get:
      operationId: service.render_service
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/service_name'
      responses:
        '200':
          description: Returns a render of the service
        '400':
          description: Could not render the service
        '404':
          description: The specified data collection or data collection filter specified in the service does not exist in the pack
      tags:
        - Service
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_service_name/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_service_name_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: params-only
    post:
      operationId: service.execute_service
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/service_name'
      requestBody:
        x-body-name: service_variables
        description: The  variables for the service execution
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: The service was submitted for execution
        '400':
          description: Could not submit the service for execution. Check variables
        '404':
          description: The specified service does not exist in the pack
      tags:
        - Service
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_service_name/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_service_name_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Service
      responses:
        '200':
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: never
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
  '/service_engine/{pack_name}/service/{service_name}/field/{field_name}':
    post:
      operationId: document.get_document_with_filter
      parameters:
        - $ref: '#/components/parameters/pack_name'
        - $ref: '#/components/parameters/service_name'
        - $ref: '#/components/parameters/field_name'
      requestBody:
        x-body-name: filter_variables
        description: Variables for the filter
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Get all of the data collections
        '204':
          description: There are no documents in the data collection that match the filter
        '404':
          description: The specified data collection or filter does not exist in the pack
      tags:
        - Service
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_service_field/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_service_field_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Service
      responses:
        '200':
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: never
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
  /service_engine/execution:
    post:
      operationId: service_execution.search_service_execution
      parameters: null
      requestBody:
        description: The search parameters for the search
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceExecutionSearch'
      responses:
        '200':
          description: The service execution search found records
        '400':
          description: Search does not meet schema requirements
        '404':
          description: No executions found
      tags:
        - Service Execution
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_execution/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_execution_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
  '/service_engine/execution/id/{document_id}':
    get:
      operationId: servicee_xecution.get_service_execution
      parameters:
        - $ref: '#/components/parameters/document_id'
      responses:
        '200':
          description: The service execution was found
        '400':
          description: Invalid request parameters
        '404':
          description: service execution not found
      tags:
        - Service Execution
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_execution_id/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_execution_id_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    post:
      operationId: servicee_xecution.update_service_execution
      parameters:
        - $ref: '#/components/parameters/document_id'
      requestBody:
        x-body-name: service_execution updates
        description: The updates of the service execution
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceExecution'
      responses:
        '202':
          description: The service execution was updated
        '208':
          description: No changes to service execution
        '400':
          description: Does not meet schema requirements
      tags:
        - Service Execution
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_execution_id/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_execution_id_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    delete:
      operationId: service_execution.delete_service_execution
      parameters:
        - $ref: '#/components/parameters/document_id'
      responses:
        '200':
          description: The service execution was deleted
        '400':
          description: Invalid request parameters
      tags:
        - Service Execution
      x-amazon-apigateway-integration:
        uri: 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:lw_apigw_handler_execution_id/invocations'
        type: aws_proxy
        credentials: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/lw_api_apigw_handler_execution_id_role'
        httpMethod: POST
      x-amazon-apigateway-request-validator: all
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Service Execution
      responses:
        '200':
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: never
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
